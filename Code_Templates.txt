//  [Core > Inc > defines.h]  -------------------------------------------------

  ******************************************************************************
  Project :
  Author  : Jaesung Oh
  
  TEXT Encoding : UTF-8
  
  Compiler  : STM32CubeIDE 1.x.x / STM32CubeXx Firmware Package Vx.xx.x
  MCU type  : STM32
  crystal   : Mhz
  CoreClock : Mhz
  
  HAL_Driver :
  LL_Driver  : GPIO, USART, TIM
  ******************************************************************************

/* Define to prevent recursive inclusion */
#ifndef __DEFINES_H
#define __DEFINES_H
#ifdef __cplusplus
 extern "C" {
#endif

//HW 버젼번호
#define VERSION_NUM      0x01 

//펌웨어 보호설정 자동변경
#define AUTO_RDP_L1       0 

//디버그 메시지 UART
#define DBG_UART          USART1

//반복 타이머
#define BASE_TIM          TIM1
#define BASE_TIM_FREQ     1000   //1kHz (주기:1ms)

//PWM
//TIMER1, Frequency:10000Hz, Resolution:100
#define xx_PWM_TIM         TIM1
#define xx_PWM_CH          LL_TIM_CHANNEL_CH1
#define xx_PWM_FREQ        10000 //Frequency: 10kHz
#define xx_PWM_RESOL       100   //Resolution: 100 으로 고정
#define xx_PWM_POLAR       LL_TIM_OCPOLARITY_HIGH
#define xx_PWM_ADJ_STEP    5

/* [사용자 매크로] */

//GPIO제어 메크로
#define xx_ENABLE()    LL_GPIO_SetOutputPin(xx_GPIO_Port, xx_Pin)     //High-Active
#define xx_DISABLE()   LL_GPIO_ResetOutputPin(xx_GPIO_Port, xx_Pin)

#ifdef __cplusplus
}
#endif
#endif /*__ DEFINES_H */


//  [Core > Src > stm32fXxx_it.c]  ----------------------------------------------

/* USER CODE BEGIN 0 */

/* [인터럽트 콜백함수 - weak 속성] */
void __attribute__((weak)) SYSTICK_Callback(void)
{

}

void __attribute__((weak)) GPIO_EXTI_Callback(uint32_t ExtiLine)
{
  switch(ExtiLine)
  {
    //case LL_EXTI_LINE_0:
    //  break;

    default:
      break;
  }
}

void __attribute__((weak)) TIM_PeriodElapsedCallback(TIM_TypeDef *TIMx)
{
  switch ( (uint32_t)TIMx )
  {
    //case (uint32_t)TIM1:
    //  break;

    default:
      break;
  }
}
void __attribute__((weak)) UART_RxCpltCallback(USART_TypeDef *USARTx)
{
  LL_USART_ReceiveData8(USARTx);
}

void __attribute__((weak)) UART_TxEmptyCallback(USART_TypeDef *USARTx)
{
  LL_USART_DisableIT_TXE(USARTx);
}

/* USER CODE END 0 */

// ~ ~ ~ ~ ~ ~

void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* [SysTick 인터럽트 핸들러] */
  SYSTICK_Callback();

  /* USER CODE END SysTick_IRQn 1 */
}

// ~ ~ ~ ~ ~ ~

void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* [TIM1 업데이트 인터럽트 핸들러] */
  if(LL_TIM_IsActiveFlag_UPDATE(TIM1))
  {
    LL_TIM_ClearFlag_UPDATE(TIM1);
    TIM_PeriodElapsedCallback(TIM1);
  }

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}

// ~ ~ ~ ~ ~ ~

void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    
    /* [EXTI0 인터럽트 핸들러] */
    GPIO_EXTI_Callback(LL_EXTI_LINE_0);

    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}

// ~ ~ ~ ~ ~ ~

void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* [USART1 인터럽트 핸들러] */
  //Receive Data Rgister Not Empty
  if(LL_USART_IsActiveFlag_RXNE(USART1))
  {
    if(LL_USART_IsEnabledIT_RXNE(USART1))
      UART_RxCpltCallback(USART1);
  }
  //Transmit Data Rgister Empty
  if(LL_USART_IsActiveFlag_TXE(USART1))
  {
    if(LL_USART_IsEnabledIT_TXE(USART1))
      UART_TxEmptyCallback(USART1);
  }

  /* USER CODE END USART1_IRQn 1 */
}


//  [Core > Src > main.c]  ----------------------------------------------------

/* USER CODE BEGIN Header */
/*
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  TEXT Encoding : UTF-8

  HAL_Driver : RCC, USB_HOST, DAC, DMA, SPI, FATFS
  LL_Driver  : TIM, USART, GPIO
  ----------------------------------------------------------------------------*/
/* USER CODE END Header */
// ~ ~ ~
/* USER CODE BEGIN Includes */

/* [사용자 인클루드] */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "includes.h"

/* USER CODE END Includes */

// ~ ~ ~ ~ ~ ~

/* USER CODE BEGIN PV */

/* [전역 변수] */
uint32_t UID[3]; //Unique device ID
uint32_t UID32;

volatile uint32_t gSYS_Count;  //카운터
volatile uint8_t gFL_SYS_Init; //초기화 상태 플레그
volatile uint8_t gFL_10ms, gFL_100ms, gFL_1s; //반복 플레그

/* USER CODE END PV */

// ~ ~ ~ ~ ~ ~

/* [printf() 리디렉션] */
//GCC
int _write(int file, char *ptr, int len)
{
  /* Implement your write code here, this is used by puts and printf */
  int index;

  for(index=0 ; index<len ; index++)
  {
    // Your target output function
    #if SWV_Trace_EN
    ITM_SendChar(*ptr++);
    #else
    UART_TXcharNB(UART_DBG, *ptr++);
    //UART_TXchar(UART_DBG, *ptr++);
    #endif
  }
  return len;
}
//KEIL, IAR
int fputc(int ch, FILE *f)
{
  #if SWV_Trace_EN
  ITM_SendChar( (uint32_t)ch );
  #else
  UART_TXcharNB(UART_DBG, (char)ch);
  //UART_TXchar(UART_DBG, (char)ch);
  #endif

  return ch;
}

/* [인터럽트 콜백함수] */
void SYSTICK_Callback(void) //SysTick 인터럽트 1ms 주기
{

}

void TIM_PeriodElapsedCallback(TIM_TypeDef *TIMx)
{
  switch ( (uint32_t)TIMx )
  {
    case (uint32_t)BASE_TIM: // 1ms 주기
      {
        //(gSYS_Count > 86399998) ? gSYS_Count = 0 : gSYS_Count++; //1Day
        gSYS_Count++;

        //10ms
        if(( (gSYS_Count) % 10)==0)
        {
          PWM_TIM10ms_Process();
        }

        if(gFL_SYS_Init)
        {
          //1ms
          {

          }
          //10ms
          if(( (gSYS_Count + 3) % 10)==0)
          {
            gFL_10ms = 1;
          }
          //100ms
          if(( (gSYS_Count + 6) % 100)==0)
          {
            gFL_100ms = 1;
          }
          //1초
          if(( (gSYS_Count + 9) % 1000)==0)
          {
            gFL_1s = 1;
          }
        }
      }
      break;

    default:
      break;
  }
}

void GPIO_EXTI_Callback(uint32_t ExtiLine)
{
  switch(ExtiLine)
  {
    case LL_EXTI_LINE_0:

      break;

    default:
      break;
  }
}

/* USER CODE END 0 */

// ~ ~ ~ ~ ~ ~

  /* USER CODE BEGIN 2 */

  /* [셋업] */

  //Unique device ID 읽어오기
  UID[0] = *(volatile uint32_t *)UID_BASE;
  UID[1] = *(volatile uint32_t *)(UID_BASE+4);
  UID[2] = *(volatile uint32_t *)(UID_BASE+8);

  //96Bits 크기의 UID를 32Bit 크기로 축약
  {
    //[6자리 숫자] + [1자리 알파벳] 형식
    if( (UID[2] & 0xFF000000) > 0x20000000 )
    {
      UID32  =  (UID[1] >> 16) & 0x0000000FUL;
      UID32 += ((UID[1] >> 24) & 0x0000000FUL) * 10;
      UID32 +=  (UID[2]        & 0x0000000FUL) * 100;
      UID32 *= ((UID[2] >>  8) & 0x00000007UL) + 1;//31Bit 크기시 ((UID[2] >>  8) & 0x00000003UL) + 1;
    }
    else //[2자리 숫자] + [4자리 숫자 와 알파벳] 형식
    {
      uint8_t tmp[3] = {0,};

      tmp[0] = (UID[1] >> 16) & 0x7F;
      tmp[1] = (UID[1] >> 24) & 0x7F;
      tmp[2] =  UID[2] & 0x7F;

      for(uint8_t i = 0; i < 3; i++)
      {
        if(tmp[i] > 0x40) //알파벳 소문자
          tmp[i] -= 0x57;
        else if(tmp[i] > 0x40) //알파벳 대문자
          tmp[i] -= 0x37;
        else if(tmp[i] > 0x2F) //숫자
          tmp[i] -= 0x30;
      }

      UID32  = tmp[0];
      UID32 += tmp[1] * 36;
      UID32 *= tmp[2] % 6 + 1; //31Bit 크기시 tmp[2] % 3 + 1;
    }

    //Wafer num (5bits)
    UID32  = UID32 << 19;
    UID32 |= (UID[1] << 14) & 0x0007C000UL;

    //X and Y coordinates (14bits)
    UID32 |= (UID[0] >>  9) & 0x00003F80UL;
    UID32 |=  UID[0] & 0x0000007FUL;
  }

  //GPIO 출력핀 초기화

  //반복타이머 동작
  BASE_TIM_Enable(BASE_TIM, BASE_TIM_FREQ);

  //UART 송신버퍼 생성 및 초기화
  {
    setvbuf(stdout, NULL, _IONBF, 0); // 즉시 printf 가 송신될수 있도록 stdout buffer size를 0으로 설정

    //UART_SetBaud(DBG_UART, 115200);
    //HAL_Delay(1);
    UART_TXB_Init(DBG_UART, 1024);
    UART_RXB_Init(DBG_UART, 128);
  }

  //펌웨어 보호설정 자동변경
 #ifdef AUTO_RDP_L1
  #if AUTO_RDP_L1
  {
    FLASH_OBProgramInitTypeDef OBInit;

    HAL_FLASHEx_OBGetConfig(&OBInit);

    if(OBInit.RDPLevel == OB_RDP_LEVEL_0)
    {
      HAL_FLASH_Unlock();
      HAL_FLASH_OB_Unlock();

      OBInit.OptionType = OPTIONBYTE_RDP;
      OBInit.RDPLevel = (uint8_t)0xBB;

      UART_TXchar(UART_DBG,27);
      UART_TXstring(UART_DBG,"[2J");//VT100 clear screen
      UART_TXchar(UART_DBG,27);
      UART_TXstring(UART_DBG,"[H");//VT100 cursor home

      UART_TXstring(UART_DBG, "\r\n Set to read protection level 1\r\n");
      UART_TXstring(UART_DBG, " If the system freezes, turn the power off and then on.\r\n");

      HAL_FLASHEx_OBProgram(&OBInit);
      HAL_FLASH_OB_Launch();
      HAL_FLASH_OB_Lock();
      HAL_FLASH_Lock();
    }
  }
  #endif
 #endif
 
  //Debugging message
  {
    printf("%c[2J",27); //VT100 clear screen
    printf("%c[H", 27); //VT100 cursor home
    printf("\r\nUnique device ID: 0x %08lX %08lX %08lX\r\n",UID[0],UID[1],UID[2]);
    printf("HCLK:%lu PCLK2:%lu PCLK1:%lu \r\n",HAL_RCC_GetHCLKFreq(), HAL_RCC_GetPCLK2Freq(), HAL_RCC_GetPCLK1Freq());
    printf("Compile Data & Time: %s, %s\r\n", __DATE__, __TIME__);
  }
  //HAL_Delay(500); //주변부품 안정화 대기
  
  //Debugging message
  {
    printf("\r\nProgram Start...\r\n");
    UART_WiteTXcpltNB(DBG_UART);
    printf("cmd>");
  }

  //초기화 완료 플레그 설정
  gFL_SYS_Init = 1;

  //DBG UART 수신인터럽트 동작
  LL_USART_EnableIT_RXNE(DBG_UART);

  /* USER CODE END 2 */
  
// ~ ~ ~ ~ ~ ~

    /* USER CODE BEGIN 3 */

    /* [루프] */
    
    if(gFL_10ms)
    {
      gFL_10ms = 0;

    }

    if(gFL_100ms)
    {
      gFL_100ms = 0;

    }

    if(gFL_1s)
    {
      gFL_1s = 0;

    }

    //UART 콘솔
    while(UART_RXB_Count(UART_DBG) != 0)
      DBG_RxProcess(UART_DBG);

  }
  /* USER CODE END 3 */
